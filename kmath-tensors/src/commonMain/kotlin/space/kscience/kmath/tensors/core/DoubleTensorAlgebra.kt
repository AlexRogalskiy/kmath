/*
 * Copyright 2018-2022 KMath contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */


@file:OptIn(PerformancePitfall::class)

package space.kscience.kmath.tensors.core

import space.kscience.kmath.misc.PerformancePitfall
import space.kscience.kmath.misc.UnstableKMathAPI
import space.kscience.kmath.nd.*
import space.kscience.kmath.operations.DoubleField
import space.kscience.kmath.structures.*
import space.kscience.kmath.tensors.api.AnalyticTensorAlgebra
import space.kscience.kmath.tensors.api.LinearOpsTensorAlgebra
import space.kscience.kmath.tensors.api.Tensor
import space.kscience.kmath.tensors.api.TensorPartialDivisionAlgebra
import space.kscience.kmath.tensors.core.internal.*
import kotlin.math.*

/**
 * Implementation of basic operations over double tensors and basic algebra operations on them.
 */
@OptIn(PerformancePitfall::class)
public open class DoubleTensorAlgebra :
    TensorPartialDivisionAlgebra<Double, DoubleField>,
    AnalyticTensorAlgebra<Double, DoubleField>,
    LinearOpsTensorAlgebra<Double, DoubleField> {

    public companion object : DoubleTensorAlgebra()

    override val elementAlgebra: DoubleField get() = DoubleField


    /**
     * Applies the [transform] function to each element of the tensor and returns the resulting modified tensor.
     *
     * @param transform the function to be applied to each element of the tensor.
     * @return the resulting tensor after applying the function.
     */
    @Suppress("OVERRIDE_BY_INLINE")
    final override inline fun StructureND<Double>.map(transform: DoubleField.(Double) -> Double): DoubleTensor {
        val tensor = asDoubleTensor()
        //TODO remove additional copy
        val array = DoubleBuffer(tensor.source.size) { DoubleField.transform(tensor.source[it]) }
        return DoubleTensor(
            tensor.shape,
            array,
        )
    }

    public inline fun Tensor<Double>.mapInPlace(operation: (Double) -> Double) {
        if (this is DoubleTensor) {
            source.mapInPlace(operation)
        } else {
            indices.forEach { set(it, operation(get(it))) }
        }
    }

    public inline fun Tensor<Double>.mapIndexedInPlace(operation: (IntArray, Double) -> Double) {
        indices.forEach { set(it, operation(it, get(it))) }
    }

    @Suppress("OVERRIDE_BY_INLINE")
    final override inline fun StructureND<Double>.mapIndexed(transform: DoubleField.(index: IntArray, Double) -> Double): DoubleTensor {
        val tensor = this.asDoubleTensor()
        //TODO remove additional copy
        val buffer = DoubleBuffer(tensor.source.size) {
            DoubleField.transform(tensor.indices.index(it), tensor.source[it])
        }
        return DoubleTensor(tensor.shape, buffer)
    }

    @Suppress("OVERRIDE_BY_INLINE")
    final override inline fun zip(
        left: StructureND<Double>,
        right: StructureND<Double>,
        transform: DoubleField.(Double, Double) -> Double,
    ): DoubleTensor {
        checkShapesCompatible(left, right)

        val leftTensor = left.asDoubleTensor()
        val rightTensor = right.asDoubleTensor()
        val buffer = DoubleBuffer(leftTensor.source.size) {
            DoubleField.transform(leftTensor.source[it], rightTensor.source[it])
        }
        return DoubleTensor(leftTensor.shape, buffer)
    }


    public inline fun StructureND<Double>.reduceElements(transform: (DoubleBuffer) -> Double): Double =
        transform(asDoubleTensor().source.copy())
    //TODO do we need protective copy?

    override fun StructureND<Double>.valueOrNull(): Double? {
        val dt = asDoubleTensor()
        return if (dt.shape contentEquals intArrayOf(1)) dt.source[0] else null
    }

    override fun StructureND<Double>.value(): Double = valueOrNull()
        ?: throw IllegalArgumentException("The tensor shape is $shape, but value method is allowed only for shape [1]")

    /**
     * Constructs a tensor with the specified shape and data.
     *
     * @param shape the desired shape for the tensor.
     * @param array one-dimensional data array.
     * @return tensor with the [shape] shape and [array] data.
     */
    public fun fromArray(shape: IntArray, array: DoubleArray): DoubleTensor {
        checkNotEmptyShape(shape)
        checkEmptyDoubleBuffer(array)
        checkBufferShapeConsistency(shape, array)
        return DoubleTensor(shape, array.asBuffer())
    }

    /**
     * Constructs a tensor with the specified shape and initializer.
     *
     * @param shape the desired shape for the tensor.
     * @param initializer mapping tensor indices to values.
     * @return tensor with the [shape] shape and data generated by the [initializer].
     */
    override fun structureND(shape: IntArray, initializer: DoubleField.(IntArray) -> Double): DoubleTensor = fromArray(
        shape,
        TensorLinearStructure(shape).asSequence().map { DoubleField.initializer(it) }.toMutableList().toDoubleArray()
    )

    override fun Tensor<Double>.getTensor(i: Int): DoubleTensor {
        val dt = asDoubleTensor()
        val lastShape = shape.drop(1).toIntArray()
        val newShape = if (lastShape.isNotEmpty()) lastShape else intArrayOf(1)
        return DoubleTensor(
            newShape,
            dt.source.view(newShape.reduce(Int::times) * i, TensorLinearStructure.linearSizeOf(newShape))
        )
    }

    /**
     * Creates a tensor of a given shape and fills all elements with a given value.
     *
     * @param value the value to fill the output tensor with.
     * @param shape array of integers defining the shape of the output tensor.
     * @return tensor with the [shape] shape and filled with [value].
     */
    public fun full(value: Double, shape: IntArray): DoubleTensor {
        checkNotEmptyShape(shape)
        val buffer = DoubleBuffer(shape.reduce(Int::times)) { value }
        return DoubleTensor(shape, buffer)
    }

    /**
     * Returns a tensor with the same shape as `input` filled with [value].
     *
     * @param value the value to fill the output tensor with.
     * @return tensor with the `input` tensor shape and filled with [value].
     */
    public fun fullLike(structureND: StructureND<*>, value: Double): DoubleTensor {
        val shape = structureND.shape
        val buffer = DoubleBuffer(structureND.indices.linearSize) { value }
        return DoubleTensor(shape, buffer)
    }

    /**
     * Returns a tensor filled with the scalar value `0.0`, with the shape defined by the variable argument [shape].
     *
     * @param shape array of integers defining the shape of the output tensor.
     * @return tensor filled with the scalar value `0.0`, with the [shape] shape.
     */
    public fun zeros(shape: IntArray): DoubleTensor = full(0.0, shape)

    /**
     * Returns a tensor filled with the scalar value `0.0`, with the same shape as a given array.
     *
     * @return tensor filled with the scalar value `0.0`, with the same shape as `input` tensor.
     */
    public fun zeroesLike(structureND: StructureND<*>): DoubleTensor = fullLike(structureND, 0.0)

    /**
     * Returns a tensor filled with the scalar value `1.0`, with the shape defined by the variable argument [shape].
     *
     * @param shape array of integers defining the shape of the output tensor.
     * @return tensor filled with the scalar value `1.0`, with the [shape] shape.
     */
    public fun ones(shape: IntArray): DoubleTensor = full(1.0, shape)

    /**
     * Returns a tensor filled with the scalar value `1.0`, with the same shape as a given array.
     *
     * @return tensor filled with the scalar value `1.0`, with the same shape as `input` tensor.
     */
    public fun onesLike(structureND: StructureND<*>): DoubleTensor = fullLike(structureND, 1.0)

    /**
     * Returns a 2D tensor with shape ([n], [n]), with ones on the diagonal and zeros elsewhere.
     *
     * @param n the number of rows and columns
     * @return a 2-D tensor with ones on the diagonal and zeros elsewhere.
     */
    public fun eye(n: Int): DoubleTensor {
        val shape = intArrayOf(n, n)
        val buffer = DoubleBuffer(n * n) { 0.0 }
        val res = DoubleTensor(shape, buffer)
        for (i in 0 until n) {
            res[intArrayOf(i, i)] = 1.0
        }
        return res
    }

    override fun Double.plus(arg: StructureND<Double>): DoubleTensor = arg.map { this@plus + it }

    override fun StructureND<Double>.plus(arg: Double): DoubleTensor = map { it + arg }

    override fun StructureND<Double>.plus(arg: StructureND<Double>): DoubleTensor = zip(this, arg) { l, r -> l + r }

    override fun Tensor<Double>.plusAssign(value: Double) {
        mapInPlace { it + value }
    }

    override fun Tensor<Double>.plusAssign(arg: StructureND<Double>) {
        checkShapesCompatible(asDoubleTensor(), arg.asDoubleTensor())
        mapIndexedInPlace { index, value ->
            value + arg[index]
        }
    }

    override fun Double.minus(arg: StructureND<Double>): DoubleTensor = arg.map { this@minus - it }

    override fun StructureND<Double>.minus(arg: Double): DoubleTensor = map { it - arg }

    override fun StructureND<Double>.minus(arg: StructureND<Double>): DoubleTensor = zip(this, arg) { l, r -> l - r }

    override fun Tensor<Double>.minusAssign(value: Double) {
        mapInPlace { it - value }
    }

    override fun Tensor<Double>.minusAssign(arg: StructureND<Double>) {
        checkShapesCompatible(this, arg)
        mapIndexedInPlace { index, value -> value - arg[index] }
    }

    override fun Double.times(arg: StructureND<Double>): DoubleTensor = arg.map { this@times * it }

    override fun StructureND<Double>.times(arg: Double): DoubleTensor = arg * asDoubleTensor()

    override fun StructureND<Double>.times(arg: StructureND<Double>): DoubleTensor = zip(this, arg) { l, r -> l * r }

    override fun Tensor<Double>.timesAssign(value: Double) {
        mapInPlace { it * value }
    }

    override fun Tensor<Double>.timesAssign(arg: StructureND<Double>) {
        checkShapesCompatible(this, arg)
        mapIndexedInPlace { index, value -> value * arg[index] }
    }

    override fun Double.div(arg: StructureND<Double>): DoubleTensor = arg.map { this@div / it }

    override fun StructureND<Double>.div(arg: Double): DoubleTensor = map { it / arg }

    override fun StructureND<Double>.div(arg: StructureND<Double>): DoubleTensor = zip(this, arg) { l, r -> l / r }

    override fun Tensor<Double>.divAssign(value: Double) {
        mapInPlace { it / value }
    }

    override fun Tensor<Double>.divAssign(arg: StructureND<Double>) {
        checkShapesCompatible(asDoubleTensor(), arg)
        mapIndexedInPlace { index, value -> value / arg[index] }
    }

    override fun StructureND<Double>.unaryMinus(): DoubleTensor = map { -it }

    override fun Tensor<Double>.transposed(i: Int, j: Int): DoubleTensor {
        // TODO change strides instead of changing content
        val dt = asDoubleTensor()
        val ii = dt.minusIndex(i)
        val jj = dt.minusIndex(j)
        checkTranspose(dt.dimension, ii, jj)
        val n = dt.linearSize
        val resBuffer = DoubleArray(n)

        val resShape = dt.shape.copyOf()
        resShape[ii] = resShape[jj].also { resShape[jj] = resShape[ii] }

        val resTensor = DoubleTensor(resShape, resBuffer.asBuffer())

        for (offset in 0 until n) {
            val oldMultiIndex = dt.indices.index(offset)
            val newMultiIndex = oldMultiIndex.copyOf()
            newMultiIndex[ii] = newMultiIndex[jj].also { newMultiIndex[jj] = newMultiIndex[ii] }

            val linearIndex = resTensor.indices.offset(newMultiIndex)
            resTensor.source[linearIndex] = dt.source[offset]
        }
        return resTensor
    }

    override fun Tensor<Double>.view(shape: IntArray): DoubleTensor {
        checkView(asDoubleTensor(), shape)
        return DoubleTensor(shape, asDoubleTensor().source)
    }

    override fun Tensor<Double>.viewAs(other: StructureND<Double>): DoubleTensor =
        view(other.shape)

    /**
     * Broadcasting Matrix product of two tensors.
     *
     * The behavior depends on the dimensionality of the tensors as follows:
     * 1. If both tensors are 1-dimensional, the dot product (scalar) is returned.
     *
     * 2. If both arguments are 2-dimensional, the matrix-matrix product is returned.
     *
     * 3. If the first argument is 1-dimensional and the second argument is 2-dimensional,
     * a 1 is prepended to its dimension for the purpose of the matrix multiply.
     * After the matrix multiply, depending on the implementation the prepended dimension might be removed.
     *
     * 4. If the first argument is 2-dimensional and the second argument is 1-dimensional,
     * the matrix-vector product is returned.
     *
     * 5. If both arguments are at least 1-dimensional and at least one argument is N-dimensional (where N > 2),
     * then a batched matrix multiply is returned. If the first argument is 1-dimensional,
     * a 1 is prepended to its dimension for the purpose of the batched matrix multiply and removed after.
     * If the second argument is 1-dimensional, a 1 is appended to its dimension for the purpose of the batched matrix
     * multiple and removed after.
     * The non-matrix (i.e., batch) dimensions are broadcast (and thus must be broadcastable).
     * For example, if `input` is a (j &times; 1 &times; n &times; n) tensor and `other` is a
     * (k &times; n &times; n) tensor, out will be a (j &times; k &times; n &times; n) tensor.
     *
     * For more information: https://pytorch.org/docs/stable/generated/torch.matmul.html
     *
     * @param other tensor to be multiplied.
     * @return a mathematical product of two tensors.
     */
    @UnstableKMathAPI
    public infix fun StructureND<Double>.matmul(other: StructureND<Double>): DoubleTensor {
        if (shape.size == 1 && other.shape.size == 1) {
            return DoubleTensor(intArrayOf(1), DoubleBuffer(times(other).sum()))
        }

        var penultimateDim = false
        var lastDim = false

        //TODO do we need protective copy here?
        var newThis: DoubleTensor = copyToTensor()
        var newOther: DoubleTensor = other.copyToTensor()

        if (shape.size == 1) {
            penultimateDim = true
            newThis = newThis.view(intArrayOf(1) + shape)
        }

        if (other.shape.size == 1) {
            lastDim = true
            newOther = newOther.view(other.shape + intArrayOf(1))
        }

        val broadcastTensors = broadcastOuterTensors(newThis, newOther)
        newThis = broadcastTensors[0]
        newOther = broadcastTensors[1]

        val l = newThis.shape[newThis.shape.size - 2]
        val m1 = newThis.shape[newThis.shape.size - 1]
        val m2 = newOther.shape[newOther.shape.size - 2]
        val n = newOther.shape[newOther.shape.size - 1]
        check(m1 == m2) {
            "Tensors dot operation dimension mismatch: ($l, $m1) x ($m2, $n)"
        }

        val resShape = newThis.shape.sliceArray(0..(newThis.shape.size - 2)) + intArrayOf(newOther.shape.last())
        val resSize = resShape.reduce { acc, i -> acc * i }
        val resTensor = DoubleTensor(resShape, DoubleArray(resSize).asBuffer())

        val resMatrices = resTensor.matrices
        val newThisMatrices = newThis.matrices
        val newOtherMatrices = newOther.matrices

        for (i in resMatrices.indices) {
            dotTo(newThisMatrices[i], newOtherMatrices[i], resMatrices[i], l, m1, n)
        }
//
//        for ((res, ab) in resTensor.matrixSequence().zip(newThis.matrixSequence().zip(newOther.matrixSequence()))) {
//            val (a, b) = ab
//            dotTo(a, b, res, l, m1, n)
//        }

        return if (penultimateDim) {
            resTensor.view(resTensor.shape.dropLast(2).toIntArray() + intArrayOf(resTensor.shape.last()))
        } else if (lastDim) {
            resTensor.view(resTensor.shape.dropLast(1).toIntArray())
        } else {
            resTensor
        }
    }

    override fun StructureND<Double>.dot(other: StructureND<Double>): DoubleTensor {
        return if (dimension in 0..2 && other.dimension in 0..2) matmul(other)
        else error("Only vectors and matrices are allowed in non-broadcasting dot operation")
    }

    override fun diagonalEmbedding(
        diagonalEntries: Tensor<Double>,
        offset: Int,
        dim1: Int,
        dim2: Int,
    ): DoubleTensor {
        val n = diagonalEntries.shape.size
        val d1 = minusIndexFrom(n + 1, dim1)
        val d2 = minusIndexFrom(n + 1, dim2)

        check(d1 != d2) {
            "Diagonal dimensions cannot be identical $d1, $d2"
        }
        check(d1 <= n && d2 <= n) {
            "Dimension out of range"
        }

        var lessDim = d1
        var greaterDim = d2
        var realOffset = offset
        if (lessDim > greaterDim) {
            realOffset *= -1
            lessDim = greaterDim.also { greaterDim = lessDim }
        }

        val resShape = diagonalEntries.shape.slice(0 until lessDim).toIntArray() +
                intArrayOf(diagonalEntries.shape[n - 1] + abs(realOffset)) +
                diagonalEntries.shape.slice(lessDim until greaterDim - 1).toIntArray() +
                intArrayOf(diagonalEntries.shape[n - 1] + abs(realOffset)) +
                diagonalEntries.shape.slice(greaterDim - 1 until n - 1).toIntArray()
        val resTensor: DoubleTensor = zeros(resShape)

        for (i in 0 until diagonalEntries.indices.linearSize) {
            val multiIndex = diagonalEntries.indices.index(i)

            var offset1 = 0
            var offset2 = abs(realOffset)
            if (realOffset < 0) {
                offset1 = offset2.also { offset2 = offset1 }
            }
            val diagonalMultiIndex = multiIndex.slice(0 until lessDim).toIntArray() +
                    intArrayOf(multiIndex[n - 1] + offset1) +
                    multiIndex.slice(lessDim until greaterDim - 1).toIntArray() +
                    intArrayOf(multiIndex[n - 1] + offset2) +
                    multiIndex.slice(greaterDim - 1 until n - 1).toIntArray()

            resTensor[diagonalMultiIndex] = diagonalEntries[multiIndex]
        }

        return resTensor
    }

    /**
     * Compares element-wise two tensors with a specified precision.
     *
     * @param other the tensor to compare with `input` tensor.
     * @param epsilon permissible error when comparing two Double values.
     * @return true if two tensors have the same shape and elements, false otherwise.
     */
    public fun Tensor<Double>.eq(other: Tensor<Double>, epsilon: Double): Boolean =
        asDoubleTensor().eq(other) { x, y -> abs(x - y) < epsilon }

    /**
     * Compares element-wise two tensors.
     * Comparison of two Double values occurs with `1e-5` precision.
     *
     * @param other the tensor to compare with `input` tensor.
     * @return true if two tensors have the same shape and elements, false otherwise.
     */
    public infix fun Tensor<Double>.eq(other: Tensor<Double>): Boolean = eq(other, 1e-5)

    private fun Tensor<Double>.eq(
        other: Tensor<Double>,
        eqFunction: (Double, Double) -> Boolean,
    ): Boolean {
        //TODO optimize tensor conversion
        checkShapesCompatible(asDoubleTensor(), other)
        val n = asDoubleTensor().linearSize
        if (n != other.asDoubleTensor().linearSize) {
            return false
        }
        for (i in 0 until n) {
            if (!eqFunction(asDoubleTensor().source[i], other.asDoubleTensor().source[i])) {
                return false
            }
        }
        return true
    }

    /**
     * Returns a tensor of random numbers drawn from normal distributions with `0.0` mean and `1.0` standard deviation.
     *
     * @param shape the desired shape for the output tensor.
     * @param seed the random seed of the pseudo-random number generator.
     * @return tensor of a given shape filled with numbers from the normal distribution
     * with `0.0` mean and `1.0` standard deviation.
     */
    public fun randomNormal(shape: IntArray, seed: Long = 0): DoubleTensor =
        DoubleTensor(shape, getRandomNormals(shape.reduce(Int::times), seed))

    /**
     * Returns a tensor with the same shape as `input` of random numbers drawn from normal distributions
     * with `0.0` mean and `1.0` standard deviation.
     *
     * @receiver the `input`.
     * @param seed the random seed of the pseudo-random number generator.
     * @return a tensor with the same shape as `input` filled with numbers from the normal distribution
     * with `0.0` mean and `1.0` standard deviation.
     */
    public fun Tensor<Double>.randomNormalLike(seed: Long = 0): DoubleTensor =
        DoubleTensor(shape, getRandomNormals(shape.reduce(Int::times), seed))

    /**
     * Concatenates a sequence of tensors with equal shapes along the first dimension.
     *
     * @param tensors the [List] of tensors with same shapes to concatenate
     * @return tensor with concatenation result
     */
    public fun stack(tensors: List<Tensor<Double>>): DoubleTensor {
        check(tensors.isNotEmpty()) { "List must have at least 1 element" }
        val shape = tensors[0].shape
        check(tensors.all { it.shape contentEquals shape }) { "Tensors must have same shapes" }
        val resShape = intArrayOf(tensors.size) + shape
//        val resBuffer: List<Double> = tensors.flatMap {
//            it.asDoubleTensor().source.array.drop(it.asDoubleTensor().bufferStart)
//                .take(it.asDoubleTensor().linearSize)
//        }
        val resBuffer = tensors.map { it.asDoubleTensor().source }.concat()
        return DoubleTensor(resShape, resBuffer)
    }

    /**
     * Builds tensor from rows of the input tensor.
     *
     * @param indices the [IntArray] of 1-dimensional indices
     * @return tensor with rows corresponding to row by [indices]
     */
    public fun Tensor<Double>.rowsByIndices(indices: IntArray): DoubleTensor = stack(indices.map { getTensor(it) })


    private inline fun StructureND<Double>.foldDimToDouble(
        dim: Int,
        keepDim: Boolean,
        foldFunction: (DoubleArray) -> Double,
    ): DoubleTensor {
        check(dim < dimension) { "Dimension $dim out of range $dimension" }
        val resShape = if (keepDim) {
            shape.take(dim).toIntArray() + intArrayOf(1) + shape.takeLast(dimension - dim - 1).toIntArray()
        } else {
            shape.take(dim).toIntArray() + shape.takeLast(dimension - dim - 1).toIntArray()
        }
        val resNumElements = resShape.reduce(Int::times)
        val init = foldFunction(DoubleArray(1) { 0.0 })
        val resTensor = DoubleTensor(
            resShape,
            DoubleBuffer(resNumElements) { init }
        )
        val dt = asDoubleTensor()
        for (index in resTensor.indices) {
            val prefix = index.take(dim).toIntArray()
            val suffix = index.takeLast(dimension - dim - 1).toIntArray()
            resTensor[index] = foldFunction(DoubleArray(shape[dim]) { i ->
                dt[prefix + intArrayOf(i) + suffix]
            })
        }
        return resTensor
    }

    private inline fun StructureND<Double>.foldDimToInt(
        dim: Int,
        keepDim: Boolean,
        foldFunction: (DoubleArray) -> Int,
    ): IntTensor {
        check(dim < dimension) { "Dimension $dim out of range $dimension" }
        val resShape = if (keepDim) {
            shape.take(dim).toIntArray() + intArrayOf(1) + shape.takeLast(dimension - dim - 1).toIntArray()
        } else {
            shape.take(dim).toIntArray() + shape.takeLast(dimension - dim - 1).toIntArray()
        }
        val resNumElements = resShape.reduce(Int::times)
        val init = foldFunction(DoubleArray(1) { 0.0 })
        val resTensor = IntTensor(
            resShape,
            IntBuffer(resNumElements) { init }
        )
        for (index in resTensor.indices) {
            val prefix = index.take(dim).toIntArray()
            val suffix = index.takeLast(dimension - dim - 1).toIntArray()
            resTensor[index] = foldFunction(DoubleArray(shape[dim]) { i ->
                asDoubleTensor()[prefix + intArrayOf(i) + suffix]
            })
        }
        return resTensor
    }


    override fun StructureND<Double>.sum(): Double = reduceElements { it.array.sum() }

    override fun StructureND<Double>.sum(dim: Int, keepDim: Boolean): DoubleTensor =
        foldDimToDouble(dim, keepDim) { x -> x.sum() }

    override fun StructureND<Double>.min(): Double = reduceElements { it.array.min() }

    override fun StructureND<Double>.min(dim: Int, keepDim: Boolean): DoubleTensor =
        foldDimToDouble(dim, keepDim) { x -> x.minOrNull()!! }

    override fun StructureND<Double>.argMin(dim: Int, keepDim: Boolean): Tensor<Int> = foldDimToInt(dim, keepDim) { x ->
        x.withIndex().minBy { it.value }.index
    }

    override fun StructureND<Double>.max(): Double = reduceElements { it.array.max() }

    override fun StructureND<Double>.max(dim: Int, keepDim: Boolean): DoubleTensor =
        foldDimToDouble(dim, keepDim) { x -> x.maxOrNull()!! }


    override fun StructureND<Double>.argMax(dim: Int, keepDim: Boolean): IntTensor =
        foldDimToInt(dim, keepDim) { x ->
            x.withIndex().maxBy { it.value }.index
        }


    override fun StructureND<Double>.mean(): Double = sum() / indices.linearSize

    override fun StructureND<Double>.mean(dim: Int, keepDim: Boolean): DoubleTensor =
        foldDimToDouble(dim, keepDim) { arr ->
            check(dim < dimension) { "Dimension $dim out of range $dimension" }
            arr.sum() / shape[dim]
        }

    override fun StructureND<Double>.std(): Double = reduceElements { arr ->
        val mean = arr.array.sum() / indices.linearSize
        sqrt(arr.array.sumOf { (it - mean) * (it - mean) } / (indices.linearSize - 1))
    }

    override fun StructureND<Double>.std(dim: Int, keepDim: Boolean): DoubleTensor = foldDimToDouble(
        dim,
        keepDim
    ) { arr ->
        check(dim < dimension) { "Dimension $dim out of range $dimension" }
        val mean = arr.sum() / shape[dim]
        sqrt(arr.sumOf { (it - mean) * (it - mean) } / (shape[dim] - 1))
    }

    override fun StructureND<Double>.variance(): Double = reduceElements { arr ->
        val linearSize = indices.linearSize
        val mean = arr.array.sum() / linearSize
        arr.array.sumOf { (it - mean) * (it - mean) } / (linearSize - 1)
    }

    override fun StructureND<Double>.variance(dim: Int, keepDim: Boolean): DoubleTensor = foldDimToDouble(
        dim,
        keepDim
    ) { arr ->
        check(dim < dimension) { "Dimension $dim out of range $dimension" }
        val mean = arr.sum() / shape[dim]
        arr.sumOf { (it - mean) * (it - mean) } / (shape[dim] - 1)
    }

    private fun cov(x: StructureND<Double>, y: StructureND<Double>): Double {
        val n = x.shape[0]
        return ((x - x.mean()) * (y - y.mean())).mean() * n / (n - 1)
    }

    /**
     * Returns the covariance matrix `M` of given vectors.
     *
     * `M[i, j]` contains covariance of `i`-th and `j`-th given vectors
     *
     * @param tensors the [List] of 1-dimensional tensors with same shape
     * @return `M`.
     */
    public fun cov(tensors: List<StructureND<Double>>): DoubleTensor {
        check(tensors.isNotEmpty()) { "List must have at least 1 element" }
        val n = tensors.size
        val m = tensors[0].shape[0]
        check(tensors.all { it.shape contentEquals intArrayOf(m) }) { "Tensors must have same shapes" }
        val resTensor = DoubleTensor(
            intArrayOf(n, n),
            DoubleBuffer(n * n) { 0.0 }
        )
        for (i in 0 until n) {
            for (j in 0 until n) {
                resTensor[intArrayOf(i, j)] = cov(tensors[i], tensors[j])
            }
        }
        return resTensor
    }

    override fun StructureND<Double>.exp(): DoubleTensor = map { exp(it) }

    override fun StructureND<Double>.ln(): DoubleTensor = map { ln(it) }

    override fun StructureND<Double>.sqrt(): DoubleTensor = map { sqrt(it) }

    override fun StructureND<Double>.cos(): DoubleTensor = map { cos(it) }

    override fun StructureND<Double>.acos(): DoubleTensor = map { acos(it) }

    override fun StructureND<Double>.cosh(): DoubleTensor = map { cosh(it) }

    override fun StructureND<Double>.acosh(): DoubleTensor = map { acosh(it) }

    override fun StructureND<Double>.sin(): DoubleTensor = map { sin(it) }

    override fun StructureND<Double>.asin(): DoubleTensor = map { asin(it) }

    override fun StructureND<Double>.sinh(): DoubleTensor = map { sinh(it) }

    override fun StructureND<Double>.asinh(): DoubleTensor = map { asinh(it) }

    override fun StructureND<Double>.tan(): DoubleTensor = map { tan(it) }

    override fun StructureND<Double>.atan(): DoubleTensor = map { atan(it) }

    override fun StructureND<Double>.tanh(): DoubleTensor = map { tanh(it) }

    override fun StructureND<Double>.atanh(): DoubleTensor = map { atanh(it) }

    override fun power(arg: StructureND<Double>, pow: Number): StructureND<Double> = if (pow is Int) {
        arg.map { it.pow(pow) }
    } else {
        arg.map { it.pow(pow.toDouble()) }
    }

    override fun StructureND<Double>.ceil(): DoubleTensor = map { ceil(it) }

    override fun StructureND<Double>.floor(): DoubleTensor = map { floor(it) }

    override fun StructureND<Double>.inv(): DoubleTensor = invLU(1e-9)

    override fun StructureND<Double>.det(): DoubleTensor = detLU(1e-9)

    /**
     * Computes the LU factorization of a matrix or batches of matrices `input`.
     * Returns a tuple containing the LU factorization and pivots of `input`.
     *
     * @param epsilon permissible error when comparing the determinant of a matrix with zero
     * @return pair of `factorization` and `pivots`.
     * The `factorization` has the shape ``(*, m, n)``, where``(*, m, n)`` is the shape of the `input` tensor.
     * The `pivots`  has the shape ``(∗, min(m, n))``. `pivots` stores all the intermediate transpositions of rows.
     */
    public fun StructureND<Double>.luFactor(epsilon: Double): Pair<DoubleTensor, IntTensor> =
        computeLU(this, epsilon)
            ?: throw IllegalArgumentException("Tensor contains matrices which are singular at precision $epsilon")

    /**
     * Computes the LU factorization of a matrix or batches of matrices `input`.
     * Returns a tuple containing the LU factorization and pivots of `input`.
     * Uses an error of ``1e-9`` when calculating whether a matrix is degenerate.
     *
     * @return pair of `factorization` and `pivots`.
     * The `factorization` has the shape ``(*, m, n)``, where``(*, m, n)`` is the shape of the `input` tensor.
     * The `pivots`  has the shape ``(∗, min(m, n))``. `pivots` stores all the intermediate transpositions of rows.
     */
    public fun StructureND<Double>.luFactor(): Pair<DoubleTensor, IntTensor> = luFactor(1e-9)

    /**
     * Unpacks the data and pivots from a LU factorization of a tensor.
     * Given a tensor [luTensor], return tensors `Triple(P, L, U)` satisfying `P dot luTensor = L dot U`,
     * with `P` being a permutation matrix or batch of matrices,
     * `L` being a lower triangular matrix or batch of matrices,
     * `U` being an upper triangular matrix or batch of matrices.
     *
     * @param luTensor the packed LU factorization data
     * @param pivotsTensor the packed LU factorization pivots
     * @return triple of `P`, `L` and `U` tensors
     */
    public fun luPivot(
        luTensor: StructureND<Double>,
        pivotsTensor: Tensor<Int>,
    ): Triple<DoubleTensor, DoubleTensor, DoubleTensor> {
        checkSquareMatrix(luTensor.shape)
        check(
            luTensor.shape.dropLast(2).toIntArray() contentEquals pivotsTensor.shape.dropLast(1).toIntArray() ||
                    luTensor.shape.last() == pivotsTensor.shape.last() - 1
        ) { "Inappropriate shapes of input tensors" }

        val n = luTensor.shape.last()
        val pTensor = zeroesLike(luTensor)
        pTensor
            .matrixSequence()
            .zip(pivotsTensor.asIntTensor().vectorSequence())
            .forEach { (p, pivot) -> pivInit(p.as2D(), pivot.as1D(), n) }

        val lTensor = zeroesLike(luTensor)
        val uTensor = zeroesLike(luTensor)

        lTensor.matrixSequence()
            .zip(uTensor.matrixSequence())
            .zip(luTensor.asDoubleTensor().matrixSequence())
            .forEach { (pairLU, lu) ->
                val (l, u) = pairLU
                luPivotHelper(l.as2D(), u.as2D(), lu.as2D(), n)
            }

        return Triple(pTensor, lTensor, uTensor)
    }

    /**
     * QR decomposition.
     *
     * Computes the QR decomposition of a matrix or a batch of matrices, and returns a pair `Q to R` of tensors.
     * Given a tensor `input`, return tensors `Q to R` satisfying `input == Q dot R`,
     * with `Q` being an orthogonal matrix or batch of orthogonal matrices
     * and `R` being an upper triangular matrix or batch of upper triangular matrices.
     *
     * @receiver the `input`.
     * @param epsilon the permissible error when comparing tensors for equality.
     * Used when checking the positive definiteness of the input matrix or matrices.
     * @return a pair of `Q` and `R` tensors.
     */
    public fun StructureND<Double>.cholesky(epsilon: Double): DoubleTensor {
        checkSquareMatrix(shape)
        checkPositiveDefinite(asDoubleTensor(), epsilon)

        val n = shape.last()
        val lTensor = zeroesLike(this)

        for ((a, l) in asDoubleTensor().matrixSequence().zip(lTensor.matrixSequence()))
            for (i in 0 until n) choleskyHelper(a.as2D(), l.as2D(), n)

        return lTensor
    }

    override fun StructureND<Double>.cholesky(): DoubleTensor = cholesky(1e-6)

    override fun StructureND<Double>.qr(): Pair<DoubleTensor, DoubleTensor> {
        checkSquareMatrix(shape)
        val qTensor = zeroesLike(this)
        val rTensor = zeroesLike(this)

        //TODO replace with cycle
        asDoubleTensor().matrixSequence()
            .zip(
                (qTensor.matrixSequence()
                    .zip(rTensor.matrixSequence()))
            ).forEach { (matrix, qr) ->
                val (q, r) = qr
                qrHelper(matrix, q, r.as2D())
            }

        return qTensor to rTensor
    }

    override fun StructureND<Double>.svd(): Triple<DoubleTensor, DoubleTensor, DoubleTensor> =
        svd(epsilon = 1e-10)

    /**
     * Singular Value Decomposition.
     *
     * Computes the singular value decomposition of either a matrix or batch of matrices `input`.
     * The singular value decomposition is represented as a triple `Triple(U, S, V)`,
     * such that `input == U dot diagonalEmbedding(S) dot V.transpose()`.
     * If `input` is a batch of tensors, then U, S, and Vh are also batched with the same batch dimensions as `input.
     *
     * @receiver the `input`.
     * @param epsilon permissible error when calculating the dot product of vectors
     * i.e., the precision with which the cosine approaches 1 in an iterative algorithm.
     * @return a triple `Triple(U, S, V)`.
     */
    public fun StructureND<Double>.svd(epsilon: Double): Triple<DoubleTensor, DoubleTensor, DoubleTensor> {
        val size = dimension
        val commonShape = shape.sliceArray(0 until size - 2)
        val (n, m) = shape.sliceArray(size - 2 until size)
        val uTensor = zeros(commonShape + intArrayOf(min(n, m), n))
        val sTensor = zeros(commonShape + intArrayOf(min(n, m)))
        val vTensor = zeros(commonShape + intArrayOf(min(n, m), m))

        val matrices: VirtualBuffer<DoubleTensor> = asDoubleTensor().matrices
        val uTensors = uTensor.matrices
        val sTensorVectors = sTensor.vectors
        val vTensors = vTensor.matrices

        for (index in matrices.indices) {
            val matrix = matrices[index]
            val usv = Triple(
                uTensors[index],
                sTensorVectors[index],
                vTensors[index]
            )
            val matrixSize = matrix.shape.reduce { acc, i -> acc * i }
            val curMatrix = DoubleTensor(
                matrix.shape,
                matrix.source.view(0, matrixSize)
            )
            svdHelper(curMatrix, usv, m, n, epsilon)
        }

        return Triple(uTensor.transposed(), sTensor, vTensor.transposed())
    }

    override fun StructureND<Double>.symEig(): Pair<DoubleTensor, DoubleTensor> =
        symEigJacobi(maxIteration = 50, epsilon = 1e-15)

    /**
     * Returns eigenvalues and eigenvectors of a real symmetric matrix input or a batch of real symmetric matrices,
     * represented by a pair `eigenvalues to eigenvectors`.
     *
     * @param epsilon the permissible error when comparing tensors for equality
     * and when the cosine approaches 1 in the SVD algorithm.
     * @return a pair `eigenvalues to eigenvectors`.
     */
    public fun StructureND<Double>.symEigSvd(epsilon: Double): Pair<DoubleTensor, DoubleTensor> {
        //TODO optimize conversion
        checkSymmetric(asDoubleTensor(), epsilon)

        fun MutableStructure2D<Double>.cleanSym(n: Int) {
            for (i in 0 until n) {
                for (j in 0 until n) {
                    if (i == j) {
                        this[i, j] = sign(this[i, j])
                    } else {
                        this[i, j] = 0.0
                    }
                }
            }
        }

        val (u, s, v) = svd(epsilon)
        val shp = s.shape + intArrayOf(1)
        val utv = u.transposed() matmul v
        val n = s.shape.last()
        for (matrix in utv.matrixSequence()) {
            matrix.as2D().cleanSym(n)
        }

        val eig = (utv dot s.view(shp)).view(s.shape)
        return eig to v
    }

    public fun StructureND<Double>.symEigJacobi(maxIteration: Int, epsilon: Double): Pair<DoubleTensor, DoubleTensor> {
        //TODO optimize conversion
        checkSymmetric(asDoubleTensor(), epsilon)

        val size = this.dimension
        val eigenvectors = zeros(this.shape)
        val eigenvalues = zeros(this.shape.sliceArray(0 until size - 1))

        var eigenvalueStart = 0
        var eigenvectorStart = 0
        for (matrix in asDoubleTensor().matrixSequence()) {
            val matrix2D = matrix.as2D()
            val (d, v) = matrix2D.jacobiHelper(maxIteration, epsilon)

            for (i in 0 until matrix2D.rowNum) {
                for (j in 0 until matrix2D.colNum) {
                    eigenvectors.source[eigenvectorStart + i * matrix2D.rowNum + j] = v[i, j]
                }
            }

            for (i in 0 until matrix2D.rowNum) {
                eigenvalues.source[eigenvalueStart + i] = d[i]
            }

            eigenvalueStart += this.shape.last()
            eigenvectorStart += this.shape.last() * this.shape.last()
        }

        return eigenvalues to eigenvectors
    }

    /**
     * Computes the determinant of a square matrix input, or of each square matrix in a batched input
     * using LU factorization algorithm.
     *
     * @param epsilon the error in the LU algorithm&mdash;permissible error when comparing the determinant of a matrix
     * with zero.
     * @return the determinant.
     */
    public fun StructureND<Double>.detLU(epsilon: Double = 1e-9): DoubleTensor {
        checkSquareMatrix(shape)
        //TODO check for unnecessary copies
        val luTensor = copyToTensor()
        val pivotsTensor = setUpPivots()

        val n = shape.size

        val detTensorShape = IntArray(n - 1) { i -> shape[i] }
        detTensorShape[n - 2] = 1
        val resBuffer = DoubleBuffer(detTensorShape.reduce(Int::times)) { 0.0 }

        val detTensor = DoubleTensor(
            detTensorShape,
            resBuffer
        )

        luTensor.matrixSequence().zip(pivotsTensor.vectorSequence()).forEachIndexed { index, (lu, pivots) ->
            resBuffer[index] = if (luHelper(lu.as2D(), pivots.as1D(), epsilon))
                0.0 else luMatrixDet(lu.as2D(), pivots.as1D())
        }

        return detTensor
    }

    /**
     * Computes the multiplicative inverse matrix of a square matrix input, or of each square matrix in a batched input
     * using LU factorization algorithm.
     * Given a square matrix `a`, return the matrix `aInv` satisfying
     * `a dot aInv == aInv dot a == eye(a.shape[0])`.
     *
     * @param epsilon error in the LU algorithm&mdash;permissible error when comparing the determinant of a matrix with zero
     * @return the multiplicative inverse of a matrix.
     */
    public fun StructureND<Double>.invLU(epsilon: Double = 1e-9): DoubleTensor {
        val (luTensor, pivotsTensor) = luFactor(epsilon)
        val invTensor = zeroesLike(luTensor)

        //TODO replace sequence with a cycle
        val seq = luTensor.matrixSequence().zip(pivotsTensor.vectorSequence()).zip(invTensor.matrixSequence())
        for ((luP, invMatrix) in seq) {
            val (lu, pivots) = luP
            luMatrixInv(lu.as2D(), pivots.as1D(), invMatrix.as2D())
        }

        return invTensor
    }

    /**
     * LUP decomposition.
     *
     * Computes the LUP decomposition of a matrix or a batch of matrices.
     * Given a tensor `input`, return tensors `Triple(P, L, U)` satisfying `P dot input == L dot U`,
     * with `P` being a permutation matrix or batch of matrices,
     * `L` being a lower triangular matrix or batch of matrices,
     * `U` being an upper triangular matrix or batch of matrices.
     *
     * @param epsilon permissible error when comparing the determinant of a matrix with zero.
     * @return triple of `P`, `L` and `U` tensors.
     */
    public fun StructureND<Double>.lu(epsilon: Double = 1e-9): Triple<DoubleTensor, DoubleTensor, DoubleTensor> {
        val (lu, pivots) = luFactor(epsilon)
        return luPivot(lu, pivots)
    }

    override fun StructureND<Double>.lu(): Triple<DoubleTensor, DoubleTensor, DoubleTensor> = lu(1e-9)
}

public val Double.Companion.tensorAlgebra: DoubleTensorAlgebra get() = DoubleTensorAlgebra
public val DoubleField.tensorAlgebra: DoubleTensorAlgebra get() = DoubleTensorAlgebra


